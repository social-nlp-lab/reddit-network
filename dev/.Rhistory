# filter for authors who have posted more than twice
filter(val > 1) |>
arrange(desc(val))
posts |>
arrange(desc(score)) |>
# filter for just the top 500 posts by score
slice(1:500) |>
group_by(subreddit, author) |>
summarise(val = n()) |>
# filter for authors who have posted more than twice
filter(val > 1) |>
arrange(desc(val)) |>
ggplot(aes(x = author, y = val)) +
geom_bar(stat = "identity") +
facet_wrap(~subreddit)
posts |>
arrange(desc(score)) |>
# filter for just the top 500 posts by score
slice(1:500) |>
group_by(author) |>
summarise(val = n()) |>
# filter for authors who have posted more than twice
filter(val > 1) |>
arrange(desc(val)) |>
ggplot(aes(x = author, y = val)) +
geom_bar(stat = "identity")
posts |>
arrange(desc(score)) |>
# filter for just the top 500 posts by score
slice(1:500) |>
group_by(author) |>
summarise(val = n()) |>
# filter for authors who have posted more than twice
filter(val > 1) |>
arrange(desc(val)) |>
ggplot(aes(x = author, y = val)) +
geom_bar()
posts |>
arrange(desc(score)) |>
# filter for just the top 500 posts by score
slice(1:500) |>
group_by(author) |>
summarise(val = n()) |>
# filter for authors who have posted more than twice
filter(val > 1) |>
arrange(desc(val))
posts |>
arrange(desc(score)) |>
# filter for just the top 500 posts by score
slice(1:500) |>
group_by(author) |>
summarise(val = n()) |>
# filter for authors who have posted more than twice
filter(val > 1) |>
arrange(desc(val)) |>
ggplot(aes(x = author, y = val)) +
geom_bar(fill="#f68060", alpha=.6)
posts |>
arrange(desc(score)) |>
# filter for just the top 500 posts by score
slice(1:500) |>
group_by(author) |>
summarise(val = n()) |>
# filter for authors who have posted more than twice
filter(val > 1) |>
arrange(desc(val)) |>
ggplot(aes(x = author, y = val)) +
geom_bar(fill="#f68060", alpha=.6, stat = "identity")
posts |>
arrange(desc(score)) |>
# filter for just the top 500 posts by score
slice(1:500) |>
group_by(author) |>
summarise(val = n()) |>
# filter for authors who have posted more than twice
filter(val > 1) |>
arrange(desc(val)) |>
ggplot(aes(x = as.factor(author), y = val)) +
geom_bar(fill="#f68060", alpha=.6, stat = "identity")
posts |>
arrange(desc(score)) |>
# filter for just the top 500 posts by score
slice(1:500) |>
group_by(author) |>
summarise(val = n()) |>
# filter for authors who have posted more than twice
filter(val > 1) |>
arrange(desc(val)) |>
mutate(author = fct_reorder(author, val)) |>
ggplot(aes(x = author, y = val)) +
geom_bar(fill="#f68060", alpha=.6, stat = "identity")
posts |>
arrange(desc(score)) |>
# filter for just the top 500 posts by score
slice(1:500) |>
group_by(author) |>
summarise(val = n()) |>
# filter for authors who have posted more than twice
filter(val > 1) |>
mutate(author = fct_reorder(author, desc(val))) |>
ggplot(aes(x = author, y = val)) +
geom_bar(fill="#f68060", alpha=.6, stat = "identity")
posts |>
arrange(desc(score)) |>
# filter for just the top 500 posts by score
slice(1:500) |>
group_by(author) |>
summarise(val = n()) |>
# filter for authors who have posted more than twice
filter(val > 1) |>
mutate(author = fct_reorder(author, desc(val))) |>
ggplot(aes(x = author, y = val)) +
geom_bar(fill="#f68060", alpha=.6, stat = "identity") +
theme(axis.text.x = element_text(
axis = 90
))
posts |>
arrange(desc(score)) |>
# filter for just the top 500 posts by score
slice(1:500) |>
group_by(author) |>
summarise(val = n()) |>
# filter for authors who have posted more than twice
filter(val > 1) |>
mutate(author = fct_reorder(author, desc(val))) |>
ggplot(aes(x = author, y = val)) +
geom_bar(fill="#f68060", alpha=.6, stat = "identity") +
theme(axis.text.x = element_text(
angle = 90
))
posts |>
group_by(author) |>
summarise(val = n()) |>
filter(val > 2)
posts |>
group_by(author) |>
summarise(val = n()) |>
filter(val > 2) |>
arrange(desc(val))
posts |>
filter(text != '[removed]') |>
group_by(author) |>
summarise(val = n()) |>
filter(val > 2) |>
arrange(desc(val))
posts |>
filter(text != '[removed]') |>
# filter for just the top 500 posts by score
arrange(desc(score)) |>
slice(1:500) |>
group_by(author) |>
summarise(val = n()) |>
filter(val > 2) |>
arrange(desc(val))
install.packages("skimr", dependencies = T)
library(skimr)
skim(posts)
posts |>
group_by(subreddit) |>
skim()
posts <- posts |>
filter(text != '[removed')
ggplot(posts, aes(x = as.factor(subreddit), y = score)) +
geom_boxplot(fill = "slateblue", alpha = .2) +
xlab("Subreddit")
posts |>
arrange(desc(score)) |>
# filter for just the top 500 posts by score
slice(1:500) |>
group_by(author) |>
summarise(val = n()) |>
# filter for authors who have posted more than twice
filter(val > 1) |>
mutate(author = fct_reorder(author, desc(val))) |>
ggplot(aes(x = author, y = val)) +
geom_bar(fill="#f68060", alpha=.6, stat = "identity") +
theme(axis.text.x = element_text(
angle = 90
))
# influencers
posts |>
filter(text != '[removed]') |>
# filter for just the top 500 posts by score
arrange(desc(score)) |>
slice(1:500) |>
group_by(author) |>
summarise(val = n()) |>
filter(val > 2) |>
arrange(desc(val))
install.packages("RedditExtractoR", dependencies = T)
library(RedditExtractoR)
get_user_content("t2_2q1y1zzd")
get_user_content("laylab23")
# influencers
influencers <- posts |>
filter(text != '[removed]') |>
# filter for just the top 500 posts by score
arrange(desc(score)) |>
slice(1:500) |>
group_by(author) |>
summarise(val = n()) |>
filter(val > 2) |>
arrange(desc(val))
influencers <- influencers |>
left_join(users[c("id", "name")], by = "id")
influencers <- influencers |>
left_join(users[c("id", "name")], by = c("author" = "id"))
df <- df |> unique()
users <- subs |> map(\(x){
df <- tibble(read_json(paste0(dat_path, x, "_redditor.json"),
simplifyVector = TRUE)[[2]])
df <- df |> unique()
}
) |> list_rbind()
View(users)
users <- subs |> map(\(x){
df <- tibble(read_json(paste0(dat_path, x, "_redditor.json"),
simplifyVector = TRUE)[[2]])
df <- df |> unique(id)
}
) |> list_rbind()
users <- subs |> map(\(x){
df <- tibble(read_json(paste0(dat_path, x, "_redditor.json"),
simplifyVector = TRUE)[[2]])
df <- df |>
filter(unique(id))
}
) |> list_rbind()
unique(users$id)
users <- subs |> map(\(x){
df <- tibble(read_json(paste0(dat_path, x, "_redditor.json"),
simplifyVector = TRUE)[[2]])
df <- df |>
distinct()
}
) |> list_rbind()
users <- subs |> map(\(x){
df <- tibble(read_json(paste0(dat_path, x, "_redditor.json"),
simplifyVector = TRUE)[[2]])
df <- df |>
distinct(id)
}
) |> list_rbind()
View(users)
users <- subs |> map(\(x){
df <- tibble(read_json(paste0(dat_path, x, "_redditor.json"),
simplifyVector = TRUE)[[2]])
}
) |>
list_rbind() |>
distinct()
# first map the userid to username
influencers <- influencers |>
left_join(users[c("id", "name")], by = c("author" = "id"))
View(posts)
View(users)
users[c("id", "name")]
View(influencers)
# influencers
influencers <- posts |>
filter(text != '[removed]') |>
# filter for just the top 500 posts by score
arrange(desc(score)) |>
slice(1:500) |>
group_by(author) |>
summarise(val = n()) |>
filter(val > 2) |>
arrange(desc(val))
View(influencers)
# first map the userid to username
influencers <- influencers |>
left_join(users[c("id", "name")], by = c("author" = "id"))
View(influencers)
# influencers
influencers <- posts |>
filter(text != '[removed]') |>
# filter for just the top 500 posts by score
arrange(desc(score)) |>
slice(1:500) |>
group_by(author) |>
summarise(val = n()) |>
filter(val > 2) |>
arrange(desc(val))
# first map the userid to username
influencers <- influencers |>
left_join(users[c("id", "name")], by = c("author" = "id")) |>
distinct()
library(RedditExtractoR)
get_user_content("StoneyGwynn")
stone <- get_user_content("StoneyGwynn")
View(stone)
stone$StoneyGwynn$comments |> nrow()
stone[1][2]
stone[1][2]
stone[1][1]
stone[1]
x <- stone[1]
x <- stone[1][1]
x <- stone[[1]]
nrow(x$comments)
x$comments$subreddit
x$comments$subreddit |> unique()
x$comments$subreddit |> unique() + x$threads$subreddit
paste0(x$comments$subreddit |> unique(), x$threads$subreddit |> unique())
merge(x$comments$subreddit |> unique(), x$threads$subreddit |> unique())
c(x$comments$subreddit |> unique(), x$threads$subreddit |> unique())
c(x$comments$subreddit, x$threads$subreddit) |> unique()
get_user_info <- function(userid){
user_ls <- get_user_content(userid)
ncomments <- nrow(user_ls[[1]]$comments)
nposts <- nrow(user_ls[[1]]$threads)
subreddits <- c(user_ls$comments$subreddit, user_ls$threads$subreddit) |>
unique()
# join in df
tibble(user_id = userid, n_comments = ncomments, n_posts = nposts, subreddits = subreddits)
}
influencers$name |>
map(get_user_info) |>
bind_rows()
get_user_content("willatkins408")
get_user_info <- function(userid){
out <- tryCatch(
{
user_ls <- get_user_content(userid)
ncomments <- nrow(user_ls[[1]]$comments)
nposts <- nrow(user_ls[[1]]$threads)
subreddits <- c(user_ls$comments$subreddit, user_ls$threads$subreddit) |>
unique()
# join in df
tibble(user_id = userid, n_comments = ncomments, n_posts = nposts, subreddits = subreddits)
},
error = function(cond){
message(paste0("username returned an error:", userid))
}
)
return(out)
}
influencers$name |>
map(get_user_info) |>
bind_rows()
get_user_info <- function(userid){
out <- tryCatch(
{
user_ls <- get_user_content(userid)
ncomments <- nrow(user_ls[[1]]$comments)
nposts <- nrow(user_ls[[1]]$threads)
subreddits <- c(user_ls$comments$subreddit, user_ls$threads$subreddit) |>
unique()
# join in df
tibble(user_id = userid, n_comments = ncomments, n_posts = nposts, subs = subreddits)
},
error = function(cond){
message(paste0("username returned an error:", userid))
}
)
return(out)
}
networks <- influencers$name |>
map(get_user_info) |>
bind_rows()
networks <- influencers$name[1] |>
map(get_user_info) |>
bind_rows()
View(influencers)
View(networks)
subreddits <- c(stone$comments$subreddit, stone$threads$subreddit) |>
unique()
subreddits <- c(stone$comments$subreddit, stone$threads$subreddit)
stone[[1]]$comments$subreddit
get_user_info <- function(userid){
out <- tryCatch(
{
user_ls <- get_user_content(userid)
ncomments <- nrow(user_ls[[1]]$comments)
nposts <- nrow(user_ls[[1]]$threads)
subreddits <- c(user_ls[[1]]$comments$subreddit, user_ls[[1]]$threads$subreddit) |>
unique()
# join in df
tibble(user_id = userid, n_comments = ncomments, n_posts = nposts, subs = subreddits)
},
error = function(cond){
message(paste0("username returned an error:", userid))
}
)
return(out)
}
networks <- influencers$name |>
map(get_user_info) |>
bind_rows()
View(networks)
set.seed(2023)
library(igraph)
user_subs <- unique(networks$subs)
library(ggraph)
install.packages("ggraph", dependencies = T)
library(ggraph)
set.seed(2023)
# create graph object
sub_net <- igraph::graph_from_data_frame(networks, directed = FALSE)
user_subs <- unique(networks$subs)
library(igraph)
library(ggraph)
# create graph object
sub_net <- igraph::graph_from_data_frame(networks, directed = FALSE)
set.seed(2023)
ggraph(sub_net, layout = "fr") +
geom_edge_link(color = "grey", alpha = 0.7) +
geom_node_point(aes(color = as.factor(user_id))) +
theme_void() +
labs(title = "Drug Influencer Subreddit Network")
View(sub_net)
ggraph(sub_net, layout = "fr") +
geom_edge_link(color = "grey", alpha = 0.7) +
geom_node_point(aes(color = as.factor(influencers$name))) +
theme_void() +
labs(title = "Drug Influencer Subreddit Network")
write_rds(networks, "./data/influencer_subreddits.rds")
user_subs <- networks[c("user_id", "subs")]
library(igraph)
library(ggraph)
# create graph object
sub_net <- igraph::graph_from_data_frame(networks, directed = FALSE)
View(sub_net)
View(influencers)
# create graph object
sub_net <- igraph::graph_from_data_frame(user_subs, directed = FALSE)
library(igraph)
library(ggraph)
# create graph object
sub_net <- igraph::graph_from_data_frame(user_subs, directed = FALSE)
set.seed(2023)
ggraph(sub_net, layout = "fr") +
geom_edge_link(color = "grey", alpha = 0.7) +
geom_node_point(aes(color = as.factor(influencers$name))) +
theme_void() +
labs(title = "Drug Influencer Subreddit Network")
View(sub_net)
V(sub_net)$user <- ifelse(
V(sub_net)$name %in% influencers$name, 1, 0
)
set.seed(2023)
sub_net[]
ggraph(sub_net, layout = "fr") +
geom_edge_link(color = "grey", alpha = 0.7) +
geom_node_point(aes(color = as.factor(user))) +
theme_void() +
labs(title = "Drug Influencer Subreddit Network")
install.packages("networkD3", dependencies = T)
library(networkD3)
networkD3::simpleNetwork(user_subs)
networks <- read_rds("./data/influencer_subreddits.rds")
?simpleNetwork
#| fig-height: 18
library(networkD3)
networkD3::simpleNetwork(user_subs, zoom = TRUE)
igraph::degree(sub_net)
igraph::ego(sub_net, order = 2, nodes = "UCKYOU")
igraph::degree(sub_net) |>
tibble()
igraph::degree(sub_net) |>
tibble(acct = names(), degree )
igraph::degree(sub_net) |>
tibble(acct = names(), degree .)
igraph::degree(sub_net) |>
tibble(acct = names(), degree = .)
igraph::degree(sub_net) |>
tibble(acct = names(), degree = _)
igraph::degree(sub_net) |>
list()
igraph::degree(sub_net) |>
bind_rows()
igraph::degree(sub_net) |>
bind_rows() |>
pivot_longer()
igraph::degree(sub_net) |>
bind_rows() |>
pivot_longer(cols = "account", values_to = "degree")
igraph::degree(sub_net) |>
bind_rows() |>
pivot_longer(cols = everything(), names_to = "account", values_to = "degree")
igraph::degree(sub_net) |>
bind_rows() |>
pivot_longer(cols = everything(), names_to = "account", values_to = "degree") |>
arrange(desc(degree))
install.packages(c("httr", "jsonlite"))
install.packages(c("httr"))
install.packages(c("httr"))
library(httr)
res <- GET("https://api.pushshift.io/reddit/search/comment?since=7d&subreddit=science&aggs=author&agg_size=100")
View(res)
res
read_json("https://api.pushshift.io/reddit/search/comment?since=7d&subreddit=science&aggs=author&agg_size=100")
x <- read_json("https://api.pushshift.io/reddit/search/comment?since=7d&subreddit=science&aggs=author&agg_size=100")
View(x)
x <- read_json("https://api.pushshift.io/reddit/search/comment?since=7d&subreddit=science&aggs=author&agg_size=100")['data']
View(x)
x <- read_json("https://api.pushshift.io/reddit/search/comment?since=30d&subreddit=science&aggs=author&agg_size=100")['data']
x[1]
x <- read_json("https://api.pushshift.io/reddit/search/comment?since=30d&subreddit=science&aggs=author&agg_size=100")$data
View(x)
x[[1]]$subreddit
x <- read_json("https://api.pushshift.io/reddit/search/comment?since=30d&subreddit=science&aggs=author&agg_size=100")
x$metadata
View(x)
x <- read_json("https://api.pushshift.io/reddit/search/comment?since=30d&subreddit=science&aggs=author&agg_size=500")
View(x)
# ego
igraph::ego(sub_net, order = 2, nodes = "UCKYOU")
# ego
igraph::ego(sub_net, order = 2)
igraph::ego(sub_net, order = 2, nodes = "4")
View(sub_net)
